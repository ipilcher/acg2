# SPDX-License-Identifier: GPL-3.0-or-later

#
# Copyright 2023, 2025 Ian Pilcher <arequipeno@gmail.com>
#
# ACME Cert Getter v2 - https://github.com/ipilcher/acg2
#

policy_module(acg, 0)

require {
	attribute can_change_object_identity;
	type cert_t;
	type cgroup_t;
	type container_file_t;
	type default_context_t;
	type devlog_t;
	type file_context_t;
	type httpd_t;
	type http_port_t;
	type kernel_t;
	type net_conf_t;
	type NetworkManager_var_run_t;
	type passwd_file_t;
	type proc_t;
	type selinux_config_t;
	type sssd_var_lib_t;
	type sysfs_t;
	type syslogd_var_run_t;
	type systemd_userdbd_runtime_t;
	type unconfined_t;
	type user_devpts_t;
	type var_run_t;
};


#
# ACME Certificate Getter (/usr/local/bin/acg)
#

type acg_t;
type acg_exec_t;
type acg_etc_t;
type acg_var_lib_t;
type acg_httpd_content_t;
type acg_var_run_t;

init_daemon_domain(acg_t, acg_exec_t)
files_type(acg_etc_t)
files_type(acg_var_lib_t)
files_type(acg_httpd_content_t)
files_type(acg_var_run_t)

allow unconfined_t acg_t:process2 { nosuid_transition };
allow init_t acg_t:process2 { nosuid_transition };
allow init_t acg_t:process2 { nnp_transition };
allow init_t acg_exec_t:file { unlink };

# syslog
allow acg_t self:unix_dgram_socket { create connect write };
allow acg_t kernel_t:unix_dgram_socket { sendto };
allow acg_t devlog_t:lnk_file { read };
allow acg_t devlog_t:sock_file { write };
allow acg_t syslogd_var_run_t:dir { search };

# stderr
allow acg_t user_devpts_t:chr_file { read write append };

# pyca/cryptography uses cgroup info to determine how many threads to use
allow acg_t cgroup_t:dir { search };

# config files (/etc/acg)
allow acg_t acg_etc_t:dir { search };
allow acg_t acg_etc_t:lnk_file { read };
allow acg_t acg_etc_t:file { read open getattr map };

# state directory (/var/lib/acg)
allow acg_t acg_var_lib_t:dir { search write add_name remove_name getattr };
allow acg_t acg_var_lib_t:file { read open getattr create write setattr };

# ACME challenge directory (/var/www/acme-challenge)
allow acg_t acg_httpd_content_t:dir { search write add_name remove_name };
allow acg_t acg_httpd_content_t:file { create write open getattr unlink };
allow httpd_t acg_httpd_content_t:file { getattr read open map };

# /etc/hosts (may be symlink) and DNS queries
allow acg_t net_conf_t:lnk_file { read };
allow acg_t NetworkManager_var_run_t:dir { search };
allow acg_t net_conf_t:file { getattr open read };
allow acg_t self:udp_socket { create connect write read getattr setopt };

# communication with letsencrypt.org
allow acg_t self:tcp_socket { create setopt connect getattr getopt write read };
allow acg_t http_port_t:tcp_socket { name_connect };

# system trusted CAs (and OpenSSL configuration)
allow acg_t cert_t:dir { search getattr read open };
allow acg_t cert_t:lnk_file { read };
allow acg_t cert_t:file { read open getattr };

# reload flags & lock file (/run/acg)
allow acg_t acg_var_run_t:dir { search write add_name };
allow acg_t acg_var_run_t:file { create append open getattr write lock };

# dontaudit rules (gotta love Python libraries!)
dontaudit acg_t sysfs_t:file { read };
dontaudit acg_t proc_t:file { read };
dontaudit acg_t self:tcp_socket { bind };
dontaudit acg_t acg_var_lib_t:file { ioctl };
dontaudit acg_t acg_etc_t:file { ioctl };
dontaudit acg_t acg_httpd_content_t:file { ioctl };
dontaudit acg_t acg_var_run_t:file { ioctl };


#
# Certificate File Mover (/usr/local/bin/acg-cfm)
#

type cfm_t;
type cfm_exec_t;
type cfm_etc_t;

init_daemon_domain(cfm_t, cfm_exec_t)
files_type(cfm_etc_t)

# Required to change file context user ID (e.g. unconfined_u â†’ system_u)
typeattribute cfm_t can_change_object_identity;

# Allow SELinux domain transition (as non-root user?)
allow init_t cfm_t:process2 { nnp_transition };

# Read user & group databases (/etc/passwd & /etc/group)
allow cfm_t passwd_file_t:file { read open getattr };

# Suppress errors about SSSD & systemd-userdbd (not supported for now)
dontaudit cfm_t sssd_var_lib_t:dir { search };
dontaudit cfm_t systemd_userdbd_runtime_t:dir { read };

# Read SELinux file context database
allow cfm_t default_context_t:dir { search };
allow cfm_t file_context_t:dir { search };
allow cfm_t file_context_t:file { read open getattr map };
allow cfm_t selinux_config_t: file { read open getattr };

# Log to journald
allow cfm_t self:unix_dgram_socket { create getopt setopt write };
allow cfm_t syslogd_var_run_t:dir { search };
allow cfm_t syslogd_var_run_t:sock_file { write };
allow cfm_t kernel_t:unix_dgram_socket { sendto };

# Override standard UNIX file permissions
allow cfm_t self:capability {
	dac_read_search dac_override chown fowner fsetid
};

# The same thing, but in a user namespace (systemd PrivateUsers=identity)
allow cfm_t self:cap_userns {
	dac_read_search dac_override chown fowner fsetid
};

# Read configuration files
allow cfm_t acg_etc_t:dir { search };
allow cfm_t cfm_etc_t:dir { search };
allow cfm_t cfm_etc_t:file { read open getattr };

# Read certificates & keys from /var/lib/acg
allow cfm_t acg_var_lib_t:dir { search };
allow cfm_t acg_var_lib_t:file { read open getattr };

# Write certificates & keys in the /etc/pki hierarchy
bool cfm_write_cert_t false;
if cfm_write_cert_t {
	allow cfm_t cert_t:dir { search write add_name };
	allow cfm_t cert_t:file {
		write open create getattr setattr relabelfrom relabelto
	};
}

# Write certificates & keys in container directories
bool cfm_write_container_file_t false;
if cfm_write_container_file_t {
	allow cfm_t container_file_t:dir { search write add_name };
	allow cfm_t container_file_t:file {
		write open create getattr setattr relabelfrom relabelto
	};
}
